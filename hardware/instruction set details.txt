general details:
everything is in base 10
memory indexed from 00-99
numbers are 000000-999999
every word is 6 decimal digits
program is placed in memory starting at position 00
arguments are in order, right after opcode
e.g. mov AX, 99    is    030199

registers:
AX, BX : general purpose. coding: 01 for AX and 02 for BX
FR : flag register, for internal use in cmp and je commands
IP : instruction pointer
IR : instruction register, stores the current instruction

opcodes:
00: ret
01: mov register, constant
02: mov register, register
03: mov register, memory
04: mov memory, constant
05: mov memory, register

06: add register, constant
07: add register, register

08: cmp register, constant
09: cmp register, register

10: jmp constant
11: jmp register
12: je constant
13: je register



my addition ideas:
14: mov registerA, PTR [registerB] (registerA = mem[registerB])
15: mov PTR [registerA], registerB (mem[registerA] = registerB)
16: sub register, register (sub reg, sub reg-const is useless as we can use 10s complement)
17: jne constant (if not equal, then IP = constant)
18: jl constant (if less than, then IP = constant)
19: jr register (IP = register)

: syscall
internal ones:
    : send word to master (computer that's connected)
    : wait to receive a word from master (computer that's connected)
    : check if there's a word waiting to be received